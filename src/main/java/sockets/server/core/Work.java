/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sockets.server.core;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Work implements org.apache.thrift.TBase<Work, Work._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Work");

  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTEUDO_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("conteudo_length", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTEUDO_FIELD_DESC = new org.apache.thrift.protocol.TField("conteudo", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkTupleSchemeFactory());
  }

  public String path; // required
  public int conteudo_length; // required
  /**
   * 
   * @see Operation
   */
  public Operation op; // required
  public ByteBuffer conteudo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATH((short)1, "path"),
    CONTEUDO_LENGTH((short)2, "conteudo_length"),
    /**
     * 
     * @see Operation
     */
    OP((short)3, "op"),
    CONTEUDO((short)4, "conteudo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATH
          return PATH;
        case 2: // CONTEUDO_LENGTH
          return CONTEUDO_LENGTH;
        case 3: // OP
          return OP;
        case 4: // CONTEUDO
          return CONTEUDO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTEUDO_LENGTH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTEUDO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTEUDO_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("conteudo_length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Operation.class)));
    tmpMap.put(_Fields.CONTEUDO, new org.apache.thrift.meta_data.FieldMetaData("conteudo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Work.class, metaDataMap);
  }

  public Work() {
  }

  public Work(
    String path,
    int conteudo_length,
    Operation op)
  {
    this();
    this.path = path;
    this.conteudo_length = conteudo_length;
    setConteudo_lengthIsSet(true);
    this.op = op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Work(Work other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.conteudo_length = other.conteudo_length;
    if (other.isSetOp()) {
      this.op = other.op;
    }
    if (other.isSetConteudo()) {
      this.conteudo = org.apache.thrift.TBaseHelper.copyBinary(other.conteudo);
;
    }
  }

  public Work deepCopy() {
    return new Work(this);
  }

 
  public void clear() {
    this.path = null;
    setConteudo_lengthIsSet(false);
    this.conteudo_length = 0;
    this.op = null;
    this.conteudo = null;
  }

  public String getPath() {
    return this.path;
  }

  public Work setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public int getConteudo_length() {
    return this.conteudo_length;
  }

  public Work setConteudo_length(int conteudo_length) {
    this.conteudo_length = conteudo_length;
    setConteudo_lengthIsSet(true);
    return this;
  }

  public void unsetConteudo_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTEUDO_LENGTH_ISSET_ID);
  }

  /** Returns true if field conteudo_length is set (has been assigned a value) and false otherwise */
  public boolean isSetConteudo_length() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTEUDO_LENGTH_ISSET_ID);
  }

  public void setConteudo_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTEUDO_LENGTH_ISSET_ID, value);
  }

  /**
   * 
   * @see Operation
   */
  public Operation getOp() {
    return this.op;
  }

  /**
   * 
   * @see Operation
   */
  public Work setOp(Operation op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public byte[] getConteudo() {
    setConteudo(org.apache.thrift.TBaseHelper.rightSize(conteudo));
    return conteudo == null ? null : conteudo.array();
  }

  public ByteBuffer bufferForConteudo() {
    return conteudo;
  }

  public Work setConteudo(byte[] conteudo) {
    setConteudo(conteudo == null ? (ByteBuffer)null : ByteBuffer.wrap(conteudo));
    return this;
  }

  public Work setConteudo(ByteBuffer conteudo) {
    this.conteudo = conteudo;
    return this;
  }

  public void unsetConteudo() {
    this.conteudo = null;
  }

  /** Returns true if field conteudo is set (has been assigned a value) and false otherwise */
  public boolean isSetConteudo() {
    return this.conteudo != null;
  }

  public void setConteudoIsSet(boolean value) {
    if (!value) {
      this.conteudo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case CONTEUDO_LENGTH:
      if (value == null) {
        unsetConteudo_length();
      } else {
        setConteudo_length((Integer)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((Operation)value);
      }
      break;

    case CONTEUDO:
      if (value == null) {
        unsetConteudo();
      } else {
        setConteudo((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATH:
      return getPath();

    case CONTEUDO_LENGTH:
      return Integer.valueOf(getConteudo_length());

    case OP:
      return getOp();

    case CONTEUDO:
      return getConteudo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATH:
      return isSetPath();
    case CONTEUDO_LENGTH:
      return isSetConteudo_length();
    case OP:
      return isSetOp();
    case CONTEUDO:
      return isSetConteudo();
    }
    throw new IllegalStateException();
  }

 
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Work)
      return this.equals((Work)that);
    return false;
  }

  public boolean equals(Work that) {
    if (that == null)
      return false;

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_conteudo_length = true;
    boolean that_present_conteudo_length = true;
    if (this_present_conteudo_length || that_present_conteudo_length) {
      if (!(this_present_conteudo_length && that_present_conteudo_length))
        return false;
      if (this.conteudo_length != that.conteudo_length)
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_conteudo = true && this.isSetConteudo();
    boolean that_present_conteudo = true && that.isSetConteudo();
    if (this_present_conteudo || that_present_conteudo) {
      if (!(this_present_conteudo && that_present_conteudo))
        return false;
      if (!this.conteudo.equals(that.conteudo))
        return false;
    }

    return true;
  }

 
  public int hashCode() {
    return 0;
  }

  public int compareTo(Work other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Work typedOther = (Work)other;

    lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConteudo_length()).compareTo(typedOther.isSetConteudo_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConteudo_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conteudo_length, typedOther.conteudo_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(typedOther.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, typedOther.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConteudo()).compareTo(typedOther.isSetConteudo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConteudo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conteudo, typedOther.conteudo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

 
  public String toString() {
    StringBuilder sb = new StringBuilder("Work(");
    boolean first = true;

    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("conteudo_length:");
    sb.append(this.conteudo_length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    if (isSetConteudo()) {
      if (!first) sb.append(", ");
      sb.append("conteudo:");
      if (this.conteudo == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.conteudo, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkStandardSchemeFactory implements SchemeFactory {
    public WorkStandardScheme getScheme() {
      return new WorkStandardScheme();
    }
  }

  private static class WorkStandardScheme extends StandardScheme<Work> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Work struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTEUDO_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.conteudo_length = iprot.readI32();
              struct.setConteudo_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = Operation.findByValue(iprot.readI32());
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTEUDO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.conteudo = iprot.readBinary();
              struct.setConteudoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Work struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTEUDO_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.conteudo_length);
      oprot.writeFieldEnd();
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        oprot.writeI32(struct.op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.conteudo != null) {
        if (struct.isSetConteudo()) {
          oprot.writeFieldBegin(CONTEUDO_FIELD_DESC);
          oprot.writeBinary(struct.conteudo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkTupleSchemeFactory implements SchemeFactory {
    public WorkTupleScheme getScheme() {
      return new WorkTupleScheme();
    }
  }

  private static class WorkTupleScheme extends TupleScheme<Work> {

   
    public void write(org.apache.thrift.protocol.TProtocol prot, Work struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPath()) {
        optionals.set(0);
      }
      if (struct.isSetConteudo_length()) {
        optionals.set(1);
      }
      if (struct.isSetOp()) {
        optionals.set(2);
      }
      if (struct.isSetConteudo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetConteudo_length()) {
        oprot.writeI32(struct.conteudo_length);
      }
      if (struct.isSetOp()) {
        oprot.writeI32(struct.op.getValue());
      }
      if (struct.isSetConteudo()) {
        oprot.writeBinary(struct.conteudo);
      }
    }

   
    public void read(org.apache.thrift.protocol.TProtocol prot, Work struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.conteudo_length = iprot.readI32();
        struct.setConteudo_lengthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.op = Operation.findByValue(iprot.readI32());
        struct.setOpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.conteudo = iprot.readBinary();
        struct.setConteudoIsSet(true);
      }
    }
  }

}

